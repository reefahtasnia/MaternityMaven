CREATE SEQUENCE USER_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE;

CREATE OR REPLACE TYPE ADDRESS_TYPE AS
    OBJECT (
        STREET VARCHAR2(100),
        REGION VARCHAR2(50),
        DISTRICT VARCHAR2(50),
        COUNTRY VARCHAR2(50)
    );
/

CREATE TABLE USERS (
    USERID NUMBER DEFAULT USER_ID_SEQ.NEXTVAL NOT NULL,
    FIRSTNAME VARCHAR(50) NOT NULL,
    LASTNAME VARCHAR(50) NOT NULL,
    FULLNAME VARCHAR2(255) GENERATED ALWAYS AS (FIRSTNAME
                                                || ' '
                                                || LASTNAME),
    EMAIL VARCHAR(255) NOT NULL,
    DATE_OF_BIRTH DATE,
    BLOOD_GROUP VARCHAR(5),
    PHONE_NUMBER VARCHAR(16),
    ADDRESS ADDRESS_TYPE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_USERID PRIMARY KEY (USERID)
);

ALTER TABLE USERS
    ADD CONSTRAINT CHK_PHONE CHECK (
        LENGTH(PHONE_NUMBER) BETWEEN 11 AND 16
    );

ALTER TABLE USERS
    ADD AGE NUMBER;

CREATE OR REPLACE PROCEDURE UPDATEUSERAGES IS
BEGIN
    UPDATE USERS
    SET
        AGE = FLOOR(
            MONTHS_BETWEEN(SYSDATE, DATE_OF_BIRTH) / 12
        )
    WHERE
        DATE_OF_BIRTH IS NOT NULL;
    COMMIT;
END UPDATEUSERAGES;
/

CREATE TABLE DOCTORS (
    BMDC VARCHAR(100) NOT NULL,
    FULLNAME VARCHAR2(255) NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    GENDER VARCHAR2(10),
    PHONE VARCHAR2(15),
    DEPT VARCHAR2(100),
    MBBSYEAR NUMBER NOT NULL,
    HOSP VARCHAR2(255),
    CHAMBER VARCHAR2(255),
    EXPERIENCE NUMBER,
    TOTAL_OPERATIONS NUMBER,
    DATE_OF_BIRTH DATE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_BMDC PRIMARY KEY (BMDC)
);

CREATE TABLE ADMIN (
    ADMIN_ID INT PRIMARY KEY,
    NAME VARCHAR(255),
    EMAIL VARCHAR(255),
    HASHED_PASSWORD VARCHAR(255),
    PHONE_NO VARCHAR(255)
);
INSERT INTO ADMIN (
    ADMIN_ID,
    NAME,
    EMAIL,
    HASHED_PASSWORD,
    PHONE_NO
) VALUES (
    3,
    'Maternity Maven',
    'maternitymaven302@gmail.com',
    '12345',
    '098764321'
);
CREATE TABLE PASSWORDS (
    USERID NUMBER,
    HASHED_PASSWORD VARCHAR(255),
    BMDC VARCHAR(100),
    CONSTRAINT FK_USERID FOREIGN KEY (USERID) REFERENCES USERS(USERID) ON DELETE CASCADE,
    CONSTRAINT FK_BMDC FOREIGN KEY (BMDC) REFERENCES DOCTORS(BMDC) ON DELETE CASCADE
);

CREATE TABLE USER_IMAGES (
    IMAGE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    FILENAME VARCHAR2(255) NOT NULL,
    MIME_TYPE VARCHAR2(100) NOT NULL,
    IMAGE_DATA BLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS(USERID)
);

CREATE TABLE DOCTOR_IMAGES (
    IMAGE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    BMDC VARCHAR(255) NOT NULL,
    FILENAME VARCHAR2(255) NOT NULL,
    MIME_TYPE VARCHAR2(100) NOT NULL,
    IMAGE_DATA BLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK__IMAGE_BMDC FOREIGN KEY (BMDC) REFERENCES DOCTORS(BMDC)
);

CREATE OR REPLACE VIEW MEDICALHISTORYVIEW AS
    SELECT
        M.USER_ID,
        M.YEAR  AS INCIDENT_YEAR,
        M.INCIDENT,
        M.TREATMENT,
        U.FIRSTNAME,
        U.LASTNAME,
        U.DATE_OF_BIRTH,
        (M.YEAR - EXTRACT(YEAR FROM U.DATE_OF_BIRTH)) AS AGE_OF_INCIDENT
    FROM
        MEDICAL_HISTORY M
        JOIN USERS U
        ON M.USER_ID = U.USERID;

CREATE OR REPLACE PROCEDURE CALCULATEEXPERIENCE (
    P_BMDC IN DOCTORS.BMDC%TYPE
) IS
    V_CURRENT_YEAR NUMBER;
    V_MBBS_YEAR    NUMBER;
    V_EXPERIENCE   NUMBER;
BEGIN
    SELECT
        EXTRACT(YEAR FROM SYSDATE) INTO V_CURRENT_YEAR
    FROM
        DUAL;
    SELECT
        TO_NUMBER(MBBSYEAR) INTO V_MBBS_YEAR
    FROM
        DOCTORS
    WHERE
        BMDC = P_BMDC;
    V_EXPERIENCE := V_CURRENT_YEAR - V_MBBS_YEAR - 1;
 
    -- Correcting negative experience
    IF V_EXPERIENCE < 1 THEN
        V_EXPERIENCE := 0;
    END IF;

    -- Updating the doctor's experience
    UPDATE DOCTORS
    SET
        EXPERIENCE = V_EXPERIENCE
    WHERE
        BMDC = P_BMDC;
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No such doctor found with BMDC: '
                             || P_BMDC);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: '
                             || SQLERRM);
        ROLLBACK;
END CALCULATEEXPERIENCE;
 

--PROGGA
CREATE TABLE MEDICAL_HISTORY ( 
    USER_ID INT, 
    YEAR INT, 
    INCIDENT VARCHAR(255), 
    TREATMENT VARCHAR(255), 
    FOREIGN KEY (USER_ID) REFERENCES USERS(USERID) 
);
CREATE TABLE BACKUP_MEDICAL ( 
    USER_ID INT, 
    YEAR INT, 
    INCIDENT VARCHAR(255), 
    TREATMENT VARCHAR(255), 
    DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    FOREIGN KEY (USER_ID) REFERENCES USERS(USERID) 
);
CREATE TRIGGER TR1 
BEFORE DELETE 
ON MEDICAL_HISTORY 
FOR EACH ROW 
BEGIN 
    INSERT INTO BACKUP_MEDICAL (USER_ID,
        YEAR,
        INCIDENT,
        TREATMENT) 
    VALUES (:OLD.USER_ID,
            :OLD.YEAR,
            :OLD.INCIDENT,
            :OLD.TREATMENT);
END;
/

CREATE TABLE FETAL_MOVEMENT (
    USER_ID INT,
    BABY_MOVEMENT VARCHAR(255),
    DURATION INT,
    MOVEMENT_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USERID)
);

--NABIHA

CREATE SEQUENCE MEDICINE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER MEDICINE_TRIGGER 
BEFORE INSERT ON MEDICINETRACKER 
FOR EACH ROW
BEGIN
    SELECT
        MEDICINE_SEQ.NEXTVAL INTO :NEW.ID
    FROM
        DUAL;
END;

CREATE TABLE MEDICINE ( 
    MEDICINE_CODE INT, 
    MEDICINE_NAME VARCHAR2(100) 
);
CREATE TABLE MEDICINETRACKER ( 
    MEDICINE_CODE INT, 
    USER_ID INT, 
    ID NUMBER NOT NULL, 
    NAME VARCHAR2(100), 
    DOSAGE VARCHAR2(50), 
    TIME VARCHAR2(50), 
    FOREIGN KEY (USER_ID) REFERENCES USERS(USERID) 
);
CREATE SEQUENCE APPOINTMENT_SEQ 
    MINVALUE 1 
    MAXVALUE 9999999999999999999999999999 
    INCREMENT BY 1 
    START WITH 41 
    CACHE 20 
    NOORDER NOCYCLE 
    NOKEEP NOSCALE 
    GLOBAL;

CREATE TABLE APPOINTMENT ( 
    APPOINTMENT_ID NUMBER(38, 0) PRIMARY KEY, 
    USER_ID NUMBER, 
    BMDC_NO VARCHAR2(100 BYTE), 
    APPOINTMENT_TIMESTAMP TIMESTAMP(6), 
    DAY_OF_WEEK VARCHAR2(255 BYTE), 
    FOREIGN KEY (USER_ID) REFERENCES USERS(USERID), 
    FOREIGN KEY (BMDC_NO) REFERENCES DOCTORS(BMDC) 
);

CREATE TYPE NUTRITION_FACTS AS OBJECT ( 
    CALORIES DECIMAL(5, 2), 
    PROTEIN DECIMAL(5, 2), 
    CARBOHYDRATES DECIMAL(5, 2), 
    FAT DECIMAL(5, 2) 
);
CREATE TABLE FOODLIST ( 
    FOOD_NAME VARCHAR2(250), 
    NUTRITION_DETAILS NUTRITION_FACTS
);
INSERT INTO FOODLIST ( FOOD_NAME, NUTRITION_DETAILS)
VALUES ( 'Apple', NUTRITION_FACTS(52.00, 0.26, 13.81, 0.17) );

CREATE TABLE CALORIETRACKER ( 
    FOOD_ITEM VARCHAR2(255), 
    USER_ID INT, 
    SERVING INT, 
    CALORIES INT, 
    MEAL_TYPE VARCHAR2(255), 
    ENTRY_DATE DATE, -- Renamed to 'entry_date' to avoid confusion with reserved keywords
    ENTRY_TIME TIMESTAMP, -- Changed from TIME to TIMESTAMP
    FOREIGN KEY (USER_ID) REFERENCES USERS(USERID) 
);

--ZAIMA

CREATE TABLE PRODUCTS (
    PRODUCTID NUMBER PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(255) NOT NULL,
    PRICE NUMBER NOT NULL,
    STOCK NUMBER NOT NULL,
    IMAGE VARCHAR2(255) NOT NULL
);

ALTER TABLE PRODUCTS ADD CTGR VARCHAR(255);

CREATE TABLE CART (
    PRODUCTID NUMBER,
    USER_ID NUMBER,
    TITLE VARCHAR2(255),
    PRICE NUMBER,
    IMAGE VARCHAR2(255),
    QUANTITY NUMBER,
    PRIMARY KEY (PRODUCTID, USER_ID)
);

CREATE TABLE ORDERS (
    USER_ID NUMBER,
    ORDER_ID VARCHAR2(255),
    PRODUCTID NUMBER,
    TITLE VARCHAR2(255),
    PRICE NUMBER,
    IMAGE VARCHAR2(255),
    QUANTITY NUMBER
);

CREATE TABLE PLACES (
    USER_ID INT,
    ORDER_ID INT,
    DATE_T DATE,
    BILL NUMBER
);

CREATE SEQUENCE FEEDBACK_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCYCLE;
/

CREATE TABLE FEEDBACKS (
    FEEDBACK_ID INT DEFAULT FEEDBACK_SEQ.NEXTVAL,
    DES CLOB,
    RATE INT,
    USER_ID INT,
    DOCTOR_ID VARCHAR2(255),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USERID) ENABLE,
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS (BMDC) ENABLE
);